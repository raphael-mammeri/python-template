{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello \u00b6 Faire une page exemple type pour les tutorial Faire un template pour les pages avec les tags comme par ex les paages en cours d'\u00e9citure/drafts...etc","title":"Home"},{"location":"#hello","text":"Faire une page exemple type pour les tutorial Faire un template pour les pages avec les tags comme par ex les paages en cours d'\u00e9citure/drafts...etc","title":"Hello"},{"location":"generic/","text":"Math \u00b6 If you are using mobile browser : Be very careful here! Theorem 1 Theorem 1Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \\[ \\begin{equation} \\mathfrak L\\to \\mathbb G_m \\end{equation} \\] \\[ \\begin{equation}\\mathfrak T \\to \\mathbb G_m \\end{equation} \\] \\[ \\left\\{\\sin\\left(\\frac{1}{n}\\right)\\right\\}_{n}^ {\\infty} \\] Let Omega be \\(\\Omega\\) be a set. 1 {% extends \"base.html\" %} {% block announce %} {% endblock %} This is the documentation for the python package template link features \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] Math \u00b6 \\DeclareMathOperator{\\Lie}{Lie} \\(k \\to \\sin\\) \\[ \\begin{equation} \\operatorname{h}^0(X,\\Omega^1_{X/k}\\otimes_k \\operatorname{Lie}(G)) \\end{equation} \\\\ \\lim_{h \\to 0 } \\frac{f(x+h)-f(x)}{h} \\] Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 gitGraph commit commit branch develop commit commit commit checkout main commit commit graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; Example Unordered List Ordered List * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci The range () function is used to generate a sequence of numbers. Unordered list Ordered list Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci The range () function is used to generate a sequence of numbers. Without highlight With highlight def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] bubble_sort.py def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Theorem 2 (Phasellus posuere in sem ut cursus) Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Un autre titre 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Theorem 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Theorem 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"generic"},{"location":"generic/#math","text":"If you are using mobile browser : Be very careful here! Theorem 1 Theorem 1Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \\[ \\begin{equation} \\mathfrak L\\to \\mathbb G_m \\end{equation} \\] \\[ \\begin{equation}\\mathfrak T \\to \\mathbb G_m \\end{equation} \\] \\[ \\left\\{\\sin\\left(\\frac{1}{n}\\right)\\right\\}_{n}^ {\\infty} \\] Let Omega be \\(\\Omega\\) be a set. 1 {% extends \"base.html\" %} {% block announce %} {% endblock %} This is the documentation for the python package template link features \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\]","title":"Math"},{"location":"generic/#math_1","text":"\\DeclareMathOperator{\\Lie}{Lie} \\(k \\to \\sin\\) \\[ \\begin{equation} \\operatorname{h}^0(X,\\Omega^1_{X/k}\\otimes_k \\operatorname{Lie}(G)) \\end{equation} \\\\ \\lim_{h \\to 0 } \\frac{f(x+h)-f(x)}{h} \\] Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 gitGraph commit commit branch develop commit commit commit checkout main commit commit graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; Example Unordered List Ordered List * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci The range () function is used to generate a sequence of numbers. Unordered list Ordered list Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci The range () function is used to generate a sequence of numbers. Without highlight With highlight def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] bubble_sort.py def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Theorem 2 (Phasellus posuere in sem ut cursus) Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Un autre titre 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Theorem 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Theorem 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"Math"},{"location":"probability/funtions/","text":"We will study in this section the measurable functions \u00b6 here is definition \u00b6 Theorem 1 (Measure Extension Theorem) Let \\(\\mathcal{A}\\) be semiring and let \\(\\mu: \\mathcal{A} \\to [0, \\infty]\\) be an additive, \\(\\sigma\\) -subadditive, and \\(\\sigma\\) -finite set function with \\(\\mu(\\emptyset)=0.\\) Then there exists a unique \\(\\sigma\\) -finite measure \\(\\tilde{\\mu}: \\mathcal{A} \\to [0, \\infty]\\) such that \\(\\mu(A) = \\tilde{\\mu}(A)\\) for all \\(A \\in \\mathcal{A}.\\) this voila Certainly! In probability theory, a semi-ring (also known as a semi-algebra) is a collection of sets that satisfies certain properties. Let's consider an example of a semi-ring. Example: Let's consider the set of intervals on the real line, denoted as \\(\\mathcal{I}\\) . A semi-ring on \\(\\mathcal{I}\\) can be defined as the collection of all intervals of the form \\([a, b)\\) , where \\(a\\) and \\(b\\) are real numbers with \\(a < b\\) . This collection of intervals satisfies the properties of a semi-ring: Non-emptiness: Every interval \\([a, b)\\) is non-empty since it contains at least one real number. Finite intersection property: The intersection of any two intervals \\([a, b)\\) and \\([c, d)\\) is either empty or of the form \\([e, f)\\) , where \\(e\\) and \\(f\\) are real numbers. In other words, the intersection of two intervals is either an empty set or another interval. Closed under set difference: If \\([a, b)\\) and \\([c, d)\\) are intervals in the semi-ring, then their set difference \\([a, b) \\setminus [c, d)\\) is a finite union of disjoint intervals. Therefore, the collection of intervals \\([a, b)\\) forms a semi-ring on the set of intervals \\(\\mathcal{I}\\) . Please note that the example provided is just one instance of a semi-ring, and there are various other examples depending on the context and the set under consideration.","title":"funtions"},{"location":"probability/funtions/#we-will-study-in-this-section-the-measurable-functions","text":"","title":"We will study in this section the measurable functions"},{"location":"probability/funtions/#here-is-definition","text":"Theorem 1 (Measure Extension Theorem) Let \\(\\mathcal{A}\\) be semiring and let \\(\\mu: \\mathcal{A} \\to [0, \\infty]\\) be an additive, \\(\\sigma\\) -subadditive, and \\(\\sigma\\) -finite set function with \\(\\mu(\\emptyset)=0.\\) Then there exists a unique \\(\\sigma\\) -finite measure \\(\\tilde{\\mu}: \\mathcal{A} \\to [0, \\infty]\\) such that \\(\\mu(A) = \\tilde{\\mu}(A)\\) for all \\(A \\in \\mathcal{A}.\\) this voila Certainly! In probability theory, a semi-ring (also known as a semi-algebra) is a collection of sets that satisfies certain properties. Let's consider an example of a semi-ring. Example: Let's consider the set of intervals on the real line, denoted as \\(\\mathcal{I}\\) . A semi-ring on \\(\\mathcal{I}\\) can be defined as the collection of all intervals of the form \\([a, b)\\) , where \\(a\\) and \\(b\\) are real numbers with \\(a < b\\) . This collection of intervals satisfies the properties of a semi-ring: Non-emptiness: Every interval \\([a, b)\\) is non-empty since it contains at least one real number. Finite intersection property: The intersection of any two intervals \\([a, b)\\) and \\([c, d)\\) is either empty or of the form \\([e, f)\\) , where \\(e\\) and \\(f\\) are real numbers. In other words, the intersection of two intervals is either an empty set or another interval. Closed under set difference: If \\([a, b)\\) and \\([c, d)\\) are intervals in the semi-ring, then their set difference \\([a, b) \\setminus [c, d)\\) is a finite union of disjoint intervals. Therefore, the collection of intervals \\([a, b)\\) forms a semi-ring on the set of intervals \\(\\mathcal{I}\\) . Please note that the example provided is just one instance of a semi-ring, and there are various other examples depending on the context and the set under consideration.","title":"here is definition"},{"location":"probability/measure%20theory/","text":"Warning Page in progress. There may be typos and the content is subject to change. Measure theory \u00b6 Introduction \u00b6 Measure theory is a branch of mathematics that provides a rigorous framework for understanding and quantifying the concept of \"size\" or \"measure\" of sets. It deals with the study of measures, which are functions that assign a non-negative real number to subsets of a given set. In probability theory, measure theory introduces key concepts such as probability spaces, sample spaces and events. The numerical values that are assigned to events will capture the likelihood or uncertainty of outcomes. These concepts establish a solid foundation for studying probabilistic models and their properties. Let's see an illustration in the case of real number \\(\\mathbb{R}.\\) Lebesgue Measure on Real Numbers \u00b6 Consider an interval \\(I = [a, b] \\subset \\mathbb{R}\\) where \\(b>a.\\) The most natural measure one would assign to the interval \\(I\\) would be \\(b-a.\\) This would also have been the natural measure if one or its two sides of \\(I\\) were open. Let's note this \"measure\" \\(\\mu.\\) We also would want this definition to be extended to any set that can be expressed as the disjoint union of intervals as follows : if \\(E \\subset \\mathbb{R}\\) can be writen as a disjoint union of intervals \\(I_i\\) for \\(i\\) in some index set \\(S,\\) then we would define the measure of \\(E\\) as the sum measures of the different intervals \\(I_i\\) : $$ \\mu(E) = \\sum_{i \\in S} \\mu(I_i) = \\sum_{i \\in S} (b_i - a_i) $$ where \\(a_i < b_i \\in \\mathbb{R}\\) are the sides of the interval \\(I_i.\\) Is this definition mathematically coherent, meaning does it lead to mathematical contradictions ? Does it make sens if the index set \\(S\\) is infinite ? Can we extend this definition to any subset of \\(\\mathbb{R}\\) ? If it can not be extended to all subsets of \\(\\mathbb{R}\\) is there a smaller collection of subsets of \\(\\mathbb{R}\\) to which we can extend the definition of \\(\\mu\\) ? These questions are addressed by defining the notions of \\(\\sigma\\) -algebras, measurable spaces and a proper definition of a measure and with some tools like the measure extension theorem. In this example the collection of sets on which we can extend the set function \\(\\mu\\) is called the Borel \\(\\sigma\\) -algebra and \\(\\mu\\) is called the Lebesgue measure. We will develop their construction in the next subsections.","title":"measure theory"},{"location":"probability/measure%20theory/#measure-theory","text":"","title":"Measure theory"},{"location":"probability/measure%20theory/#introduction","text":"Measure theory is a branch of mathematics that provides a rigorous framework for understanding and quantifying the concept of \"size\" or \"measure\" of sets. It deals with the study of measures, which are functions that assign a non-negative real number to subsets of a given set. In probability theory, measure theory introduces key concepts such as probability spaces, sample spaces and events. The numerical values that are assigned to events will capture the likelihood or uncertainty of outcomes. These concepts establish a solid foundation for studying probabilistic models and their properties. Let's see an illustration in the case of real number \\(\\mathbb{R}.\\)","title":"Introduction"},{"location":"probability/measure%20theory/#lebesgue-measure-on-real-numbers","text":"Consider an interval \\(I = [a, b] \\subset \\mathbb{R}\\) where \\(b>a.\\) The most natural measure one would assign to the interval \\(I\\) would be \\(b-a.\\) This would also have been the natural measure if one or its two sides of \\(I\\) were open. Let's note this \"measure\" \\(\\mu.\\) We also would want this definition to be extended to any set that can be expressed as the disjoint union of intervals as follows : if \\(E \\subset \\mathbb{R}\\) can be writen as a disjoint union of intervals \\(I_i\\) for \\(i\\) in some index set \\(S,\\) then we would define the measure of \\(E\\) as the sum measures of the different intervals \\(I_i\\) : $$ \\mu(E) = \\sum_{i \\in S} \\mu(I_i) = \\sum_{i \\in S} (b_i - a_i) $$ where \\(a_i < b_i \\in \\mathbb{R}\\) are the sides of the interval \\(I_i.\\) Is this definition mathematically coherent, meaning does it lead to mathematical contradictions ? Does it make sens if the index set \\(S\\) is infinite ? Can we extend this definition to any subset of \\(\\mathbb{R}\\) ? If it can not be extended to all subsets of \\(\\mathbb{R}\\) is there a smaller collection of subsets of \\(\\mathbb{R}\\) to which we can extend the definition of \\(\\mu\\) ? These questions are addressed by defining the notions of \\(\\sigma\\) -algebras, measurable spaces and a proper definition of a measure and with some tools like the measure extension theorem. In this example the collection of sets on which we can extend the set function \\(\\mu\\) is called the Borel \\(\\sigma\\) -algebra and \\(\\mu\\) is called the Lebesgue measure. We will develop their construction in the next subsections.","title":"Lebesgue Measure on Real Numbers"},{"location":"project/contribution/","text":"Contribuiton guide \u00b6 Hello and thank you for your interest to the project.","title":"Contributing"},{"location":"project/contribution/#contribuiton-guide","text":"Hello and thank you for your interest to the project.","title":"Contribuiton guide"},{"location":"reference/SUMMARY/","text":"my_package module this","title":"SUMMARY"},{"location":"reference/module/this/","text":"This file has an example function, with a documentation string which should serve as a template for scikit-learn docstrings. hello ( name ) \u00b6 Just a greetings example. Args: name (str): Name to greet. Returns: str: greeting message Examples: .. code:: python >>> hello(\"Roman\") 'Hello Roman!' sklearn_template ( X , y , a = 1 , flag = True , f = None , ** kwargs ) \u00b6 This is where a short one-line description goes. This is where a longer, multi-line description goes. It's not required, but might be helpful if more information is needed. It can also refer to sections below, such as Notes, See Also, etc. Parameters: Name Type Description Default X array_like or sparse matrix Array of shape (n_samples, n_features). Other information about the array here. Keep it to ~2 lines: refer to Notes section for more. required y array_like Array of shape (n_samples,). Other information about the array here. Keep it to ~2 lines: refer to Notes section for more. required a int (optional, default Description of what a does 1 flag bool (optional, default If true, then do one thing. If false, then do another thing. True f callable (optional, default Call-back function. If not specified, then some other function will be used None **kwargs Additional keyword arguments will be passed to name_of_function {} Returns: Name Type Description z ndarray result of shape (n_samples,). Note that here we use \"ndarray\" rather than \"array_like\", because we assure we'll return a numpy array. optional_info dict returned only if flag is True. More info about this return value. Examples: >>> X = np . ones (( 4 , 3 )) >>> y = np . ones ( 4 ) >>> sklearn_template ( X , y ) (z, xmin, xmax) # this should match the actual output Notes \u00b6 More information. This can be in paragraph form, and uses markdown to show lists like this with as many items as you want Or to show code blocks, with two colons:: import pylab as pl x = np.arange(10) y = np.sin(x) pl.plot(x, y) We use a code block for a pylab example, because plotting does not play well with doctests (doctests runs all the example code, and checks that the output matches). See Also \u00b6 numpy.some_related_function : short description (optional) sklearn.some_other_function : short description","title":"this"},{"location":"reference/module/this/#my_package.module.this.hello","text":"Just a greetings example. Args: name (str): Name to greet. Returns: str: greeting message Examples: .. code:: python >>> hello(\"Roman\") 'Hello Roman!'","title":"hello()"},{"location":"reference/module/this/#my_package.module.this.sklearn_template","text":"This is where a short one-line description goes. This is where a longer, multi-line description goes. It's not required, but might be helpful if more information is needed. It can also refer to sections below, such as Notes, See Also, etc. Parameters: Name Type Description Default X array_like or sparse matrix Array of shape (n_samples, n_features). Other information about the array here. Keep it to ~2 lines: refer to Notes section for more. required y array_like Array of shape (n_samples,). Other information about the array here. Keep it to ~2 lines: refer to Notes section for more. required a int (optional, default Description of what a does 1 flag bool (optional, default If true, then do one thing. If false, then do another thing. True f callable (optional, default Call-back function. If not specified, then some other function will be used None **kwargs Additional keyword arguments will be passed to name_of_function {} Returns: Name Type Description z ndarray result of shape (n_samples,). Note that here we use \"ndarray\" rather than \"array_like\", because we assure we'll return a numpy array. optional_info dict returned only if flag is True. More info about this return value. Examples: >>> X = np . ones (( 4 , 3 )) >>> y = np . ones ( 4 ) >>> sklearn_template ( X , y ) (z, xmin, xmax) # this should match the actual output","title":"sklearn_template()"},{"location":"reference/module/this/#my_package.module.this.sklearn_template--notes","text":"More information. This can be in paragraph form, and uses markdown to show lists like this with as many items as you want Or to show code blocks, with two colons:: import pylab as pl x = np.arange(10) y = np.sin(x) pl.plot(x, y) We use a code block for a pylab example, because plotting does not play well with doctests (doctests runs all the example code, and checks that the output matches).","title":"Notes"},{"location":"reference/module/this/#my_package.module.this.sklearn_template--see-also","text":"numpy.some_related_function : short description (optional) sklearn.some_other_function : short description","title":"See Also"}]}